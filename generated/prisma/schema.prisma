// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum DisputaStatus {
  AGUARDANDO
  ABERTA
  SUSPENSA
  ENCERRADA
}

enum TipoEmpresa {
  ME
  EPP
  OUTRA
}

enum TipoDocumento {
  PROPOSTA
  HABILITACAO
  OUTROS
  EDITAL
  ATA
  CONTRATO
  ANEXO
}

enum PerfilUsuario {
  ADMIN
  PREGOEIRO
  LICITANTE
  VISUALIZADOR
}

enum TipoAutorChat {
  PREGOEIRO
  LICITANTE
}

enum StatusProposta {
  PENDENTE
  ACEITA
  REJEITADA
  CANCELADA
}

enum TipoAutorMensagem {
  PREGOEIRO
  LICITANTE
}

model Usuario {
  id           String         @id @default(uuid())
  nome         String
  email        String         @unique
  senha        String
  perfil       PerfilUsuario
  LogAtividade LogAtividade[]
  MensagemChat MensagemChat[]
  licitante    Licitante?     @relation(fields: [licitanteId], references: [id])
  licitanteId  String?        @unique
}

model Edital {
  id                     String                 @id @default(uuid())
  numero                 String                 @unique
  objeto                 String
  modalidade             String
  status                 String
  dataAbertura           DateTime
  arquivoPdf             String?
  disputas               Disputa[]
  documentosObrigatorios DocumentoObrigatorio[]
  documentos             Documento[]
  lotes                  Lote[]
  mensagensChat          MensagemChat[]
  createdAt              DateTime               @default(now())
  updatedAt              DateTime               @updatedAt
}

model Disputa {
  id            String               @id @default(uuid())
  editalId      String
  status        DisputaStatus
  inicio        DateTime?
  fimPrevisto   DateTime?
  encerramento  DateTime?
  tempoRestante Int?
  edital        Edital               @relation(fields: [editalId], references: [id], onDelete: Cascade)
  propostas     Proposta[]
  lances        Lance[]
  documentos    DocumentoLicitante[]
  mensagensChat MensagemChat[]
  logs          LogAtividade[]
  sessoes       Sessao[]
  licitantes    Licitante[]
}

model Licitante {
  id          String      @id @default(uuid())
  razaoSocial String
  cnpj        String      @unique
  tipoEmpresa TipoEmpresa
  usuario     Usuario?

  propostas     Proposta[]
  lances        Lance[]
  documentos    DocumentoLicitante[]
  sessoes       Sessao[]
  mensagensChat MensagemChat[]
  disputas      Disputa[]
}

model Proposta {
  id            String         @id @default(uuid())
  disputaId     String
  licitanteId   String
  itemId        String
  valorCentavos Int // valor em centavos
  dataEnvio     DateTime
  arquivo       String?
  status        StatusProposta @default(PENDENTE)
  observacao    String?
  versao        Int            @default(1)
  createdBy     String
  updatedBy     String?
  deletedAt     DateTime?
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt

  disputa   Disputa   @relation(fields: [disputaId], references: [id], onDelete: Cascade)
  licitante Licitante @relation(fields: [licitanteId], references: [id], onDelete: Cascade)
  item      Item      @relation(fields: [itemId], references: [id], onDelete: Cascade)

  @@unique([itemId, licitanteId, versao])
  @@index([disputaId, itemId])
  @@index([licitanteId, status])
}

model Lance {
  id            String   @id @default(uuid())
  disputaId     String
  licitanteId   String
  valorCentavos Int // valor em centavos
  horario       DateTime
  ip            String?
  userAgent     String?

  disputa   Disputa   @relation(fields: [disputaId], references: [id], onDelete: Cascade)
  licitante Licitante @relation(fields: [licitanteId], references: [id], onDelete: Cascade)
}

model DocumentoLicitante {
  id               String        @id @default(uuid())
  disputaId        String
  licitanteId      String
  tipoDocumento    TipoDocumento
  nomeOriginal     String
  descricao        String?
  arquivoPath      String
  dataEnvio        DateTime
  versao           Int           @default(1)
  valido           Boolean       @default(true)
  hashDocumento    String?
  assinaturaBase64 String?
  assinadoPor      String?

  disputa   Disputa   @relation(fields: [disputaId], references: [id], onDelete: Cascade)
  licitante Licitante @relation(fields: [licitanteId], references: [id], onDelete: Cascade)
}

model DocumentoObrigatorio {
  id            String        @id @default(uuid())
  editalId      String
  tipoDocumento TipoDocumento
  descricao     String

  edital Edital @relation(fields: [editalId], references: [id], onDelete: Cascade)
}

model MensagemChat {
  id        String            @id @default(uuid())
  editalId  String
  autorId   String
  tipoAutor TipoAutorMensagem
  conteudo  String
  createdAt DateTime          @default(now())
  updatedAt DateTime          @updatedAt

  edital      Edital     @relation(fields: [editalId], references: [id], onDelete: Cascade)
  autor       Usuario    @relation(fields: [autorId], references: [id], onDelete: Cascade)
  Disputa     Disputa?   @relation(fields: [disputaId], references: [id])
  disputaId   String?
  Licitante   Licitante? @relation(fields: [licitanteId], references: [id])
  licitanteId String?

  @@index([editalId, createdAt])
}

model Sessao {
  id          String    @id @default(uuid())
  licitanteId String
  disputaId   String
  inicio      DateTime
  fim         DateTime?
  ip          String
  hash        String

  licitante Licitante @relation(fields: [licitanteId], references: [id])
  disputa   Disputa   @relation(fields: [disputaId], references: [id])
}

model LogAtividade {
  id        String   @id @default(uuid())
  disputaId String
  usuarioId String?
  acao      String
  detalhes  String?
  data      DateTime @default(now())
  ip        String?
  userAgent String?

  disputa Disputa  @relation(fields: [disputaId], references: [id])
  usuario Usuario? @relation(fields: [usuarioId], references: [id])
}

model Lote {
  id        String   @id @default(uuid())
  numero    String
  descricao String
  editalId  String
  status    String   @default("ATIVO") // ATIVO, CANCELADO
  itens     Item[]
  edital    Edital   @relation(fields: [editalId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([numero, editalId])
  @@index([editalId, status])
}

model Item {
  id            String     @id @default(uuid())
  numero        String
  descricao     String
  quantidade    Int
  unidade       String
  valorEstimado Int? // valor estimado em centavos
  loteId        String
  status        String     @default("ATIVO") // ATIVO, CANCELADO
  lote          Lote       @relation(fields: [loteId], references: [id], onDelete: Cascade)
  propostas     Proposta[]
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt

  @@unique([numero, loteId])
  @@index([loteId, status])
}

model Documento {
  id        String        @id @default(uuid())
  nome      String
  tipo      TipoDocumento
  caminho   String
  descricao String?
  ativo     Boolean       @default(true)
  editalId  String
  edital    Edital        @relation(fields: [editalId], references: [id], onDelete: Cascade)
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
  deletedAt DateTime?

  @@index([editalId])
  @@index([tipo])
}
