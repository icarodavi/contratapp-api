---
description: 
globs: 
alwaysApply: true
---
# üí¨ Chat em Tempo Real - Regras e Diretrizes

## Vis√£o Geral
O sistema de chat em tempo real √© um componente cr√≠tico da fase de disputa, permitindo comunica√ß√£o transparente entre pregoeiro e licitantes.

## Estrutura T√©cnica

### Backend (NestJS)
- Gateway WebSocket usando Socket.IO
- Namespace dedicado: `/chat-disputa`
- Eventos principais:
  - `join_room`: Entrar na sala da disputa
  - `leave_room`: Sair da sala
  - `send_message`: Enviar mensagem
  - `receive_message`: Receber mensagem
  - `user_joined`: Notificar entrada de usu√°rio
  - `user_left`: Notificar sa√≠da de usu√°rio

### Modelo de Dados (Prisma)
```prisma
model MensagemChat {
  id          String      @id @default(uuid())
  texto       String
  tipo        TipoMensagem
  disputaId   String
  autorId     String
  disputa     Disputa     @relation(fields: [disputaId], references: [id])
  autor       Usuario     @relation(fields: [autorId], references: [id])
  criadoEm    DateTime    @default(now())
}

enum TipoMensagem {
  PREGOEIRO
  LICITANTE
  SISTEMA
}
```

## Regras de Neg√≥cio

### Autentica√ß√£o e Autoriza√ß√£o
1. Somente usu√°rios autenticados podem enviar mensagens
2. Validar perfil do usu√°rio (PREGOEIRO ou LICITANTE)
3. Licitantes s√≥ podem enviar mensagens em disputas que participam
4. Pregoeiro s√≥ pode enviar mensagens em disputas que gerencia

### Mensagens
1. Todas as mensagens devem ser persistidas no banco
2. Campos obrigat√≥rios:
   - Texto da mensagem
   - Tipo de mensagem (PREGOEIRO/LICITANTE/SISTEMA)
   - ID da disputa
   - ID do autor
   - Timestamp

### Eventos do Sistema
1. Registrar automaticamente eventos importantes:
   - In√≠cio da disputa
   - Pausas e retomadas
   - Entrada/sa√≠da de participantes
   - Encerramento da disputa

### Valida√ß√µes
1. Tamanho m√°ximo da mensagem: 500 caracteres
2. Filtrar conte√∫do impr√≥prio
3. Rate limiting: m√°ximo 1 mensagem por segundo por usu√°rio
4. Bloquear envio de mensagens quando disputa estiver pausada

### Armazenamento e Hist√≥rico
1. Manter hist√≥rico completo das mensagens
2. Permitir exporta√ß√£o do hist√≥rico em PDF
3. Incluir chat log na ata da disputa

## Implementa√ß√£o

### Gateway
```typescript
@WebSocketGateway({
  namespace: 'chat-disputa',
  cors: true
})
export class ChatGateway {
  @WebSocketServer()
  server: Server;

  @UseGuards(WsAuthGuard)
  @SubscribeMessage('send_message')
  async handleMessage(
    @MessageBody() data: { texto: string, disputaId: string },
    @ConnectedSocket() client: Socket
  ) {
    // Valida√ß√µes e persist√™ncia
    // Broadcast para sala
  }
}
```

### Servi√ßo
```typescript
@Injectable()
export class ChatService {
  constructor(private prisma: PrismaService) {}

  async salvarMensagem(dados: {
    texto: string;
    tipo: TipoMensagem;
    disputaId: string;
    autorId: string;
  }) {
    return this.prisma.mensagemChat.create({
      data: dados
    });
  }
}
```

## Considera√ß√µes de Seguran√ßa
1. Validar tokens JWT em cada conex√£o WebSocket
2. Sanitizar input de mensagens
3. Implementar rate limiting por IP/usu√°rio
4. Manter logs de auditoria de todas as a√ß√µes
5. Implementar reconnect autom√°tico em caso de queda

## Monitoramento
1. M√©tricas de conex√µes ativas
2. Lat√™ncia de mensagens
3. Taxa de erros
4. Uso de mem√≥ria/CPU
5. Alertas para comportamentos an√¥malos

