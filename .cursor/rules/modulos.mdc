---
description: 
globs: 
alwaysApply: true
---
# üì¶ M√≥dulos do Sistema - Regras e Diretrizes

## Vis√£o Geral
O sistema segue uma arquitetura modular usando NestJS, com cada m√≥dulo representando uma funcionalidade espec√≠fica do sistema de licita√ß√µes.

## Estrutura Base dos M√≥dulos

### Padr√£o de Nomenclatura
1. Arquivos:
   - `nome.module.ts` - Defini√ß√£o do m√≥dulo
   - `nome.controller.ts` - Controlador
   - `nome.service.ts` - Servi√ßo
   - `nome.gateway.ts` - Gateway (para WebSocket)
   - `nome.dto.ts` - DTOs
   - `nome.entity.ts` - Entidades
   - `nome.pipe.ts` - Pipes de transforma√ß√£o
   - `nome.guard.ts` - Guards de autentica√ß√£o/autoriza√ß√£o

2. Diret√≥rios:
   - `/src/nome-modulo/` - Raiz do m√≥dulo
   - `/src/nome-modulo/dto/` - DTOs do m√≥dulo
   - `/src/nome-modulo/entities/` - Entidades
   - `/src/nome-modulo/pipes/` - Pipes customizados
   - `/src/nome-modulo/guards/` - Guards espec√≠ficos

## M√≥dulos do Sistema

### 1. M√≥dulo Principal (AppModule)
```typescript
@Module({
  imports: [
    PrismaModule,
    PropostaModule,
    UsuarioModule,
    EditalModule,
    AuthModule,
    ChatModule,
    TimeModule,
    DisputaModule,
    LicitanteModule,
    DocumentoModule,
    PrazoModule,
    SancaoModule,
    RecursoModule,
    DocumentoObrigatorioModule,
    LoteModule,
    ItemModule,
    LogAtividadeModule,
    SessaoModule,
  ],
  controllers: [AppController],
  providers: [AppService],
})
```

### 2. M√≥dulo de Banco de Dados (PrismaModule)
- Global para toda a aplica√ß√£o
- Fornece o PrismaService
- Gerencia conex√£o com PostgreSQL

### 3. M√≥dulo de Autentica√ß√£o (AuthModule)
- Gerencia JWT e autentica√ß√£o
- Integra PassportJS
- Fornece guards de prote√ß√£o

### 4. M√≥dulos de Neg√≥cio
1. **EditalModule**:
   - Gerencia editais
   - Modalidades de licita√ß√£o
   - Crit√©rios de julgamento

2. **DisputaModule**:
   - Controle de disputas
   - Fases da licita√ß√£o
   - Integra√ß√£o com lances

3. **LicitanteModule**:
   - Gest√£o de participantes
   - Propostas
   - Documenta√ß√£o

4. **DocumentoModule**:
   - Upload de arquivos
   - Valida√ß√£o de documentos
   - Armazenamento seguro

5. **ChatModule**:
   - Comunica√ß√£o em tempo real
   - Integra√ß√£o com WebSocket
   - Hist√≥rico de mensagens

6. **TimeModule**:
   - Controle de tempo das disputas
   - Sincroniza√ß√£o via WebSocket
   - Eventos temporais

7. **LoteModule** e **ItemModule**:
   - Gest√£o de lotes
   - Itens da licita√ß√£o
   - Valores e quantidades

8. **PrazoModule**:
   - Controle de prazos
   - Notifica√ß√µes
   - Calend√°rio de eventos

9. **SancaoModule**:
   - Registro de penalidades
   - Impedimentos
   - Hist√≥rico de san√ß√µes

10. **RecursoModule**:
    - Gest√£o de recursos
    - Prazos recursais
    - Decis√µes

11. **LogAtividadeModule**:
    - Registro de a√ß√µes
    - Auditoria
    - Rastreabilidade

12. **SessaoModule**:
    - Controle de sess√µes
    - Estado da disputa
    - Participantes ativos

## Regras de Implementa√ß√£o

### 1. Estrutura dos M√≥dulos
```typescript
@Module({
    imports: [PrismaModule, /* outros m√≥dulos necess√°rios */],
    controllers: [ModuloController],
    providers: [ModuloService],
    exports: [ModuloService] // quando necess√°rio
})
```

### 2. Inje√ß√£o de Depend√™ncias
1. Usar constructor injection
2. Declarar depend√™ncias como readonly
3. Usar interfaces quando poss√≠vel

### 3. Controladores
1. Usar decorators do NestJS
2. Implementar valida√ß√£o de DTOs
3. Documentar com Swagger
4. Usar guards apropriados

### 4. Servi√ßos
1. Implementar l√≥gica de neg√≥cio
2. Usar PrismaService para banco
3. Tratar erros adequadamente
4. Manter m√©todos puros

### 5. DTOs
1. Usar class-validator
2. Documentar com Swagger
3. Versionar quando necess√°rio
4. Manter imutabilidade

## Boas Pr√°ticas

### 1. Organiza√ß√£o
1. Um m√≥dulo por funcionalidade
2. Separar responsabilidades
3. Manter coes√£o
4. Baixo acoplamento

### 2. C√≥digo
1. Seguir Clean Code
2. Aplicar SOLID
3. Documentar adequadamente
4. Usar tipos expl√≠citos

### 3. Testes
1. Testes unit√°rios por m√≥dulo
2. Testes e2e para fluxos
3. Mocks quando necess√°rio
4. Cobertura m√≠nima de 80%

### 4. Seguran√ßa
1. Validar inputs
2. Usar guards
3. Sanitizar dados
4. Proteger rotas sens√≠veis

### 5. Performance
1. Usar cache quando poss√≠vel
2. Otimizar queries
3. Lazy loading
4. Pagination

## Documenta√ß√£o

### 1. Swagger
1. Documentar todos endpoints
2. Incluir exemplos
3. Descrever respostas
4. Marcar seguran√ßa

### 2. README
1. Descri√ß√£o do m√≥dulo
2. Depend√™ncias
3. Configura√ß√£o
4. Exemplos de uso

## Monitoramento

### 1. Logs
1. Usar logger do NestJS
2. N√≠veis apropriados
3. Contexto adequado
4. Rota√ß√£o de logs

### 2. M√©tricas
1. Tempo de resposta
2. Taxa de erro
3. Uso de recursos
4. Alertas configurados

