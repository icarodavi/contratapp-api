---
description: 
globs: 
alwaysApply: true
---
# üë• Usu√°rios - Regras e Diretrizes

## Vis√£o Geral
O m√≥dulo de usu√°rios gerencia o acesso e autentica√ß√£o no sistema de licita√ß√µes, seguindo os princ√≠pios de seguran√ßa e conformidade com a Lei 14.133/21.

## Estrutura do M√≥dulo

### Modelo de Dados (Prisma)
```prisma
model Usuario {
  id            String         @id @default(uuid())
  nome          String
  email         String         @unique
  senha         String
  perfil        PerfilUsuario
  ativo         Boolean        @default(true)
  ultimoAcesso  DateTime?
  mensagens     MensagemChat[]
  logs          LogAtividade[]
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt

  @@map("usuarios")
}

enum PerfilUsuario {
  ADMIN
  PREGOEIRO
  LICITANTE
  VISUALIZADOR
}
```

## DTOs e Valida√ß√µes

### CreateUsuarioDto
```typescript
export class CreateUsuarioDto {
  @IsString()
  @MinLength(3)
  @MaxLength(100)
  nome: string;

  @IsEmail()
  @MaxLength(100)
  email: string;

  @IsString()
  @MinLength(8)
  @Matches(/^(?=.*[A-Za-z])(?=.*\d)[A-Za-z\d]{8,}$/)
  senha: string;

  @IsEnum(PerfilUsuario)
  perfil: PerfilUsuario;
}
```

### LoginDto
```typescript
export class LoginDto {
  @IsEmail()
  email: string;

  @IsString()
  senha: string;
}
```

### UpdateSenhaDto
```typescript
export class UpdateSenhaDto {
  @IsString()
  senhaAtual: string;

  @IsString()
  @MinLength(8)
  @Matches(/^(?=.*[A-Za-z])(?=.*\d)[A-Za-z\d]{8,}$/)
  novaSenha: string;
}
```

## Regras de Neg√≥cio

### Cadastro
1. Email deve ser √∫nico
2. Senha deve conter:
   - M√≠nimo 8 caracteres
   - Letras e n√∫meros
   - Sem caracteres especiais
3. Nome completo obrigat√≥rio
4. Perfil deve ser v√°lido

### Autentica√ß√£o
1. Utilizar JWT para tokens
2. Expira√ß√£o do token em 8 horas
3. Refresh token permitido
4. Bloquear ap√≥s 5 tentativas falhas
5. Registrar data do √∫ltimo acesso

### Perfis e Permiss√µes
1. **ADMIN**:
   - Acesso total ao sistema
   - Gerenciamento de usu√°rios
   - Configura√ß√µes do sistema

2. **PREGOEIRO**:
   - Gerenciar disputas
   - Moderar chat
   - Validar documentos
   - Controlar tempo

3. **LICITANTE**:
   - Participar de disputas
   - Enviar lances
   - Enviar documentos
   - Chat p√∫blico

4. **VISUALIZADOR**:
   - Visualizar disputas
   - Acompanhar lances
   - Sem intera√ß√£o

## Implementa√ß√£o

### Controller
```typescript
@Controller('usuarios')
@ApiTags('Usu√°rios')
export class UsuarioController {
  @Post('register')
  async register(@Body() createUsuarioDto: CreateUsuarioDto) {
    // Criar novo usu√°rio
  }

  @Post('login')
  async login(@Body() loginDto: LoginDto) {
    // Autenticar usu√°rio
  }

  @Get()
  @Roles(PerfilUsuario.ADMIN)
  async findAll() {
    // Listar usu√°rios
  }

  @Patch(':id/senha')
  async updateSenha(
    @Param('id') id: string,
    @Body() updateSenhaDto: UpdateSenhaDto
  ) {
    // Atualizar senha
  }
}
```

### Service
```typescript
@Injectable()
export class UsuarioService {
  async create(createUsuarioDto: CreateUsuarioDto) {
    // Validar email √∫nico
    // Hash da senha
    // Criar usu√°rio
  }

  async login(loginDto: LoginDto) {
    // Validar credenciais
    // Gerar token
    // Atualizar √∫ltimo acesso
  }

  async updateSenha(id: string, updateSenhaDto: UpdateSenhaDto) {
    // Validar senha atual
    // Hash nova senha
    // Atualizar registro
  }
}
```

## Seguran√ßa

### Hash e Criptografia
1. Usar bcrypt para hash de senhas
2. Salt rounds: 10
3. Nunca armazenar senhas em texto plano
4. Tokens JWT com chave segura

### Valida√ß√µes de Seguran√ßa
1. Sanitizar inputs
2. Validar formatos de email
3. Prevenir injection
4. Rate limiting em login
5. Logs de tentativas falhas

### Prote√ß√£o de Dados
1. Conformidade com LGPD
2. Mascaramento de dados sens√≠veis
3. Logs de auditoria
4. Backup criptografado
5. Pol√≠tica de reten√ß√£o

## Monitoramento

### M√©tricas
1. Usu√°rios ativos
2. Taxa de login
3. Tentativas falhas
4. Tempo de resposta
5. Uso de recursos

### Logs
1. Cria√ß√£o de usu√°rios
2. Tentativas de login
3. Altera√ß√µes de senha
4. Bloqueios de conta
5. A√ß√µes administrativas

## Testes

### Testes Unit√°rios
1. Valida√ß√£o de DTOs
2. L√≥gica de servi√ßo
3. Hash de senha
4. Gera√ß√£o de token

### Testes de Integra√ß√£o
1. Fluxo de registro
2. Autentica√ß√£o
3. Atualiza√ß√£o de senha
4. Permiss√µes

## Documenta√ß√£o

### Swagger
1. Endpoints documentados
2. DTOs com exemplos
3. Respostas de erro
4. Autentica√ß√£o

### Postman
1. Cole√ß√£o de endpoints
2. Vari√°veis de ambiente
3. Testes automatizados
4. Exemplos de uso

